name: Publish to PyPI

on:
  release:
    types: [published]

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
      contents: read

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Extract version from tag
      id: get_version
      run: |
        # Remove 'v' prefix if present (e.g., v1.0.0 -> 1.0.0)
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${VERSION#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"

    - name: Update version in pyproject.toml
      run: |
        # Update version in pyproject.toml to match the tag
        sed -i 's/^version = ".*"/version = "${{ steps.get_version.outputs.version }}"/' pyproject.toml
        echo "Updated pyproject.toml version to: ${{ steps.get_version.outputs.version }}"
        # Verify the change
        grep "^version = " pyproject.toml

    - name: Install dependencies
      run: |
        poetry install --no-dev

    - name: Build package
      run: |
        poetry build

    - name: Verify build
      run: |
        ls -la dist/
        # Check that files were created
        if [ ! -f dist/*.whl ] || [ ! -f dist/*.tar.gz ]; then
          echo "Build artifacts not found!"
          exit 1
        fi

    - name: Publish to Test PyPI (optional)
      if: github.event.release.prerelease == true
      env:
        POETRY_PYPI_TOKEN_TESTPYPI: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        poetry config repositories.testpypi https://test.pypi.org/legacy/
        poetry publish -r testpypi || echo "Test PyPI publish failed, continuing..."

    - name: Publish to PyPI
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        poetry publish

    - name: Create deployment summary
      run: |
        echo "## ðŸš€ Package Published Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Package:** django-myuser" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **PyPI URL:** https://pypi.org/project/django-myuser/${{ steps.get_version.outputs.version }}/" >> $GITHUB_STEP_SUMMARY
        echo "- **Release:** ${{ github.event.release.html_url }}" >> $GITHUB_STEP_SUMMARY